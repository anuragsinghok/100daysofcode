#exception handling

# Exception Handling
# Exception handling is the process of responding to unwanted or unexpected events when a computer program runs. Exception handling deals with these events to avoid the program or system crashing, and without this process, exceptions would disrupt the normal operation of a program.
# Exceptions in Python
# Python has many built-in exceptions that are raised when your program encounters an error (something in the program goes wrong).
# When these exceptions occur, the Python interpreter stops the current process and passes it to the calling process until it is handled. If not handled, the program will crash.

a = input("enter the number: ")
print(f"multiplication table of {a} is : ")

try:
  for i in range(1,11):
     print(f"{int(a)} X {i} = {int(a)*i}")

# except Exception as e: # error as agr error agya to error bta k nuche ka code run hoga easly
#    print(e)
except: #simple exception
   print("invalid input")

print("some line of code ")
print("End of program")

# means basically agar code successfully run ho rha hai to run ho agr error ane ki smbavna hai to errror ki jagah kuch aur ho jye 

#and jaha error ane ki smbavna ho waha try lga do
#-----------------------------------------------------
# Raising Custom errors
# In python, we can raise custom errors by using the raise keyword.
salary = int(input("Enter salary amount: "))
if not 2000 < salary < 5000:
    raise ValueError("Not a valid salary")
# In the previous tutorial, we learned about different built-in exceptions in Python and why it is important to handle exceptions. However, sometimes we may need to create our own custom exceptions that serve our purpose.
# Defining Custom Exceptions
# # In Python, we can define custom exceptions by creating a new class that is derived from the built-in Exception class.

a = int(input(" enter any value between 5 to 9 "))

if (a < 5 or a > 9):
    raise ValueError("value should be between 5 and 9")


# it is basically like : agr program me phele koi glti hui like line number 5 me koi dikkat hui in this case value badi hui 9 se and letsay line 10 me uski wajah se error aarha hai to wo pura run na ho phele hi raise krde error aage  hi nhi leke jye phele phele hi bta de error raise krke
# there are many time of errors you can explore it on officail documentation


# Defining Custom Exceptions
# In Python, we can define custom exceptions by creating a new class that is derived from the built-in Exception class.
# Here's the syntax to define custom exceptions:
class CustomError (Exception):
    # code
    pass


try:
    # code ...
except CustomError:
    # code...
    # This is useful because sometimes we might want to do something when a particular exception is raised. For example, sending an error report to the admin, calling an api,
#---------------------------------------------------------
# Finally Clause
# The finally code block is also a part of exception handling. When we handle exception using the try and except block, we can include a finally block at the end. The finally block is always executed, so it is generally used for doing the concluding tasks like closing file resources or closing database connection or may be ending the program execution with a delightful messages

try :
    l = [1,3,5,6]
    i = int(input("enter the index : "))
    print(l[i])
except:
    print("some error occured")

finally:
    print("i an always executed")# kaha ye jata hai finally ke bare me ki chahe try me jaye ya exception me this code under finally will always run no matter what
# why use finally instead of writing print 

# so you you use this is function agr kuch aisa hai jisse apko print karana hi hai to wo hoga finaaly ki help se waise functions me bus sirf ek point tk excute hoga jaha milgya answer it will not execute below code function return hone ke baad below code execute nhi krta but finnaly ke baad krega


def func1():
  try:
     l = [1, 5, 6, 7]
     i = int(input("Enter the index: "))
     print(l[i])
     return 1 
  except:
     print ("Some error occurred" )
     return 0 
  finally:
     print("I am always executed" )
# print("I am always executed") 

x = func1()
print(x)
#  best example of finally  for understanding
