#map ,filter, reduce

#Map

def cube (x):
    return x*x*x
print(cube(3))

l = [1,2,3,4,5,6,67]
# lets say now i want ki jo ye cube function hai ye ab list ke hr element pe apply hoke cube return krke de so what we can do traditionally
# newl = []
# for item in l :
#     newl.append(cube(item()))

# instead of doing all this hum map method ka use kr skte hai like this :

newl = list(map(cube,l))  #phele function ka nam and then list jiske hr element pe wo fucntion apply rna chahte ho -> instead of making a cube function you can use lambda function to do this
print(newl)

# Mар
# The map function applies a function to each element in a sequence and returns a new sequence containing the transformed elements. The map function has the following syntax:

# map(function, iterable)

# The function argument is a function that is applied to each element in the Iterable argument. The iterable argument can be a list, tuple, or any other iterable objects.


#filter 
def filter_function(a):
    return a>3
newnewl = list(filter(filter_function,l)) # convert it in list else it will give filter object and map once map
print(newnewl)

# filter
# The filter function filters a sequence of elements based on a given predicate (a function that returns a boolean value) and returns a new sequence containing only the elements that meet the predicate. The filter function has the following syntax:
# filter(predicate, iterable) -> jin jin values ke liye predicate function true return krega wo print krega and return krega value and jinke liye false return krega wo nhi ayegi values
# The predicate argument is a function that returns a boolean value and is applied to each element in the iterable argument. The iterable argument can be a list, tuple, or any other iterable object



# reduce
# The reduce function is a higher-order function that applies a function to a sequence and returns a single value. It is a part of the functools module in Python and has the following syntax:

# reduce(function, iterable)

# The function argument is a function that takes in two arguments and returns a single value. The iterable argument is a sequence of elements, such as a list or tuple.
# The reduce function applies the function to the first two elements in the iterable and then applies the function to the result and the next element, and so on. The reduce function returns the final results.


from functools import reduce
# List of numbers
numbers = [1, 2, 3, 4, 5]
# Calculate the sum of the numbers using the reduce function
sum = reduce( lambda x, y : x + y, numbers) # this lambda function is just adding 1 -2 , 12-3,123-4 and so on and print final answer

# Print the sum
print(sum)

# In the above example, the reduce function applies the lambda function lambda x, y: x + y to the elements in the numbers list. The lambda function adds the two arguments x and y and returns the result. The reduce function applies the lambda function to the first two elements in the list (1 and 2), then applies the function to the result (3) and the next element (3), and so on. The final result is the sum of all the elements in the list, which is 15.
# It is important to note that the reduce function requires the functools module to be imported in order to use it.
