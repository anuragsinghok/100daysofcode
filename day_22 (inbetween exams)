# getter and setters in python
# both are decorators

# Getters
# Getters in Python are methods that are used to access the values of an object's properties. 
# They are used to return the value of a specific property, and are typically defined using the @property decorator.
# Here is an example of a simple class with a getter method:

class MyClass:
    def __init__(self, value): 
     self._value = value

    def show(self):
       print(f"value is {self._value}")

    @property #it is a getter you created a property of it  # it is a best way to do encapsulation 
    def ten_value(self):
      return 10*self._value
    

# Setters
# It is important to note that fhe getters do not take any parameters and we cannot set the value through getter method.For that we need setter method which can be added by decorating method with @property_name.setter    
    @ten_value.setter
    def ten_value(self,new_value):
      self._value = new_value/10
      return 10* self._value
    
obj = MyClass(10)
print(obj.ten_value)
obj.ten_value =56 #   this shows a error you cannot change value of it

obj.show()

# In this example, the MyClass class has a single property, value, which is initialized in the init method. The value method is defined as a getter using the @property decorator, and is used to return the value of the _value property.
