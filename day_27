# class methods

# Python Class Methods: An Introduction In Python, classes are a way to define custom
#  data types that can store data and define functions that can manipulate that data.
# One type of function that can be defined within a class is called a "method." 
# In this blog post, we will explore what Python class methods are, why they are useful, and how to use them.
# What are Python Class Methods?
# A class method is a type of method that is bound to the class and not the instance of the class. 
# In other words, it operates on the class as a whole, rather than on a specific instance of the class. Class methods are defined using the
# "@classmethod" decorator, followed by a function definition.
# The first argument of the function is always "cls," which represents the class itself.

# Why Use Python Class Methods?
# Class methods are useful in several situations. 
# For example, you might want to create a factory method that creates 
# instances of your class in a specific way. You could define a class
# method that creates the instance and returns it to the caller.
# Another common use case is to provide alternative constructors
# for your class. This can be useful if you want to create instances
# of your class in multiple ways, but still have a consistent interface 
# for doing so.

# class method is basically used or made for making changes in class varible via a class decorator method name @classmethod

class Employee:
    no_of_leaves = 8

    def __init__(self, aname, asalary, arole):
        self.name = aname
        self.salary = asalary
        self.role = arole
    def printdetails (self) :
        return f"The Name Is {self.name}. Salary is {self.salary} and role is {self.role}"
    @classmethod
    def change_leaves (cls,newleaves) : #class mehtod isliye banaya tha taki self na lena (cls is  class - wo class jisme changes kr rhe hai hum ) it take class as arguement not self
        cls.no_of_leaves = newleaves
# class method basically is liye use krte hai taKI instance bhi use kr paye class variables ko agr change kre bad me to aur self na le aur class ko input ke taur pe le aur arguement jo change krna hai 

# biggest benefit of useing class method is we can use it as alternative constructor
harry = Employee ("Harry", 255, "Instructor")
rohan = Employee ("Rohan", 455, "Student")
harry.change_leaves(34)
print(harry.no_of_leaves)

